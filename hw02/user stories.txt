A signed-out user should be able to sign in

To sign in, Bob first visits the home page of the site and clicks the sign in link. He is then presented with a sign in page. He then types in his username and password and successfully signes in. 


A signed-out should be able to reset their password.

To reset a password, Bob first visits the home page of the site and clicks the sign in link. Beneith the username and password fields there is a I forgot my password button. Bob then enters his email and clicks this button and is shown a message that a reset link was sent to his email. He then opens his email and clicks on the reset my password button in his email. 

// A signed-out user should be able to create an account. 
A signed-in user should be able to sign out.

To sign out, Bob first visits a page while signed in. Then, he clicks the sign-out button in the top right corner. 

A signed-in user should be able to change their password.

To change their password, Bob first visits the account management page while signed in. He then enters a new password and his old password. His password is then changed. 

A signed-in user should be able to create a post.

To create a post, Bob first visits the posts page. He then enters his post content into the post text box and clicks submit. 


A signed-in user should be able to read all posts.

To read all posts, Bob first vists the posts page. He then scrolls down and reads all the posts. 






Resources

Posts:

The posts page needs to keep track of all the posts.
The posts page will have a text box on the top, for users to post new posts, and all the others posts below. This layout may be similar to Facebook's feed. This will require that the application can store new posts and serve posts that were posted previously. 

These posts will be stored in a database.
When the page loads, the posts will be loaded from the database.
When the page loads, the javascript in the frontend will request the most recently posted posts. If the user continues to browse the posts, the page can request even more posts from the server. 
The javascript will send the server a request to the url /getPosts with the parameter start, which specifies how many posts to skip when finding posts, and the parameter count, which specifies how many posts to return. The posts are going to be returned as a JSON array sorted by when they were posted. 

This will require that 

The data shall be stored in MongoDB because it is plenty powerfull and more than adiquite for a small site like this homework project. 
The posts data shall be stored in a collection in MongoDB. The collection will have the folliwing schema:

_id: The id of the post. All posts will have a unique Id. 
text: the text of the post
author: the username of the user who posted the post
timestamp: when this post was posted, (in ms since epoch)




Account page:

There will be a collection in the MongoDB database that keeps track of the different users.
Each item in the collection will have the following attributes:

_id: The id of the user. This will be unique for each user
email: the email address of the user. Will be unique for each user.
passwordHash: the hash of the user's password. It will be ensured that this is adiquitly secure. THe user's raw password will not be stored because the password itself is not needed to verify that the user typed in the correct password, only a hash of the password is needed. Does not need to be unique for each user. 

When the logged-in user makes a request to the account page the page will load and display the user's email. There will be an option for the user to change their password. If the user types in their old password and thier new password the information will first be send to the backend. The backend will then generate a hash of both of the passwords. If the hash of the old password matches the hash of the existing password the old hash is replaced with the hash of the new password. 

Each one of the posts in the posts collection will have a author field, such that the author field is one of the usernames that is stored in the user collection. 

